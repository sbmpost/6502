6502 implementation documentation (sbmpost)

Memory (MEM):
--------------
- HL: 16 bit address bus pointing to a byte in MEM.
- D: 8 bit data bus. It holds the byte that HL is pointing to.
- D can be seen as a register: the value changes on clock CLK.

Registers:
--------------
- PC: 16 bit, program counter
- PR: 16 bit, prev value of HL, internal
- O: 8-bit, holds the operation, internal
- L: 8-bit, holds temporary data, internal
- X,Y: 8 bit, index registers
- A: 8-bit, accumulator

Abbreviations:
--------------
- I = register X/Y
- R = register A/I

What happens in each cpu state:
-----------------------------------------------------------------------------
  RESET: HL = PC = PR = $0000
   CLK:         D = MEM[HL], PR = HL

  SOP:  HL = PC (1st byte after OP)   |   example: LDA (ZP),Y
   CLK:  O = D, D = MEM[HL], PR = HL  |   O = LDA, D = ZP
  SLO:  HL = PC, ZP: 00|D             |  HL = 00|ZP
   CLK:  L = D, D = MEM[HL], PR = HL  |   L = ZP, D = MEM[ZP]
  SIN:  HL =         00|L+1           |  HL = 00|ZP+1
   CLK:  L = D, D = MEM[HL], PR = HL  |   L = MEM[ZP], D = MEM[00|ZP+1]
  SHI:  HL =       D/00|L+I           |  HL = MEM[00|ZP+1]|MEM[ZP]+I
   CLK:         D = MEM[PR], PR = HL  |   D = MEM[MEM[00|ZP+1]|MEM[ZP]+I]
  SCO:  HL = carry+D/00|L+I           |  HL = MEM[00|carry+ZP+1]|MEM[ZP]+I
   CLK:         D = MEM[HL], PR = HL  |   D = MEM[MEM[00|carry+ZP+1]|MEM[ZP+I]]
  SLR:  HL = PC (the next OP)         |
   CLK:  A = D, D = MEM[HL], PR = HL  |   A = D

  SAL:  RES? = Lo alu-op Ro    ALU           <- TODO
  SW :  MEM[HL]/Ri = ALUo      WM/WR (W)     <- TODO

Instruction groups: xxxxxxgg
-----------------------------------------------------------------------------

01 group (8 addr modes):

-id.-ab.xy         => zp
-id.-ab.-xy        => (zp,x)
id.-ab.-xy         => (zp),y
-id.ab.-xy         => imm
// [-id.]ab.aci[.-xy] => ci
(zpy+ab).aci       => ci

10 group (6 addr modes):

-id.-ab.-xy        => imm
-id.ab.-xy         => acc

* no indirect addr modes (unused bits)
* no ABS,y mode (txs, tsx instead)
* acc mode (+ txa, tax, dex, nop)

00 group (5 addr modes + other instructions)

* same as 10 group but without acc mode

Logic that implements a load and its addressing modes:
-----------------------------------------------------------------------------

#cpu muxes:

rX  rY  | ALU A    PRV ADR | SRC     MHI LCO | HI      MLO | LO      wO | OP
---------------    --------------    --------------    ----------    --------
 0   0  |   1       0   0  | PC       0   0  | 0        0  | ALUo    1  | D
 0   1  |   Y       0   1  | HL       0   1  | D+1      1  | D       0  | O
 1   0  |   X       1   0  | PC       1   0  | D
 1   1  |   A       1   1  | PR       1   1  | D+1

#fsm:

 S   | wO | wL | wR | PRV | ADR  | INC |  MHI  | LCO | rX  | rY  |  MLO  |       AOP       |
-------------------------------------------------------------------------------------------|
 S0  | -  | -  | 0  |  0  |  0   |  1  |   -   |  -  |  -  |  -  |   -   |        -        |

 SOP | 1  | -  | 0  |  0  |  0   |  1  |   -   |  -  |  -  |  -  |   -   |        -        |
 SLO | 0  | 1  | 0? |  0  |zp+zpy|  0  |   0   |  0  |  -  |  -  |zp+zpy |        -        |
 SIN | 0  | 1  | 0  |  0  |  1   |  0  |   0   |  0  |  0  |  0  |   0   |      L+R/1      |
 SHI | 0  | 0  | 0  |  ci |  1   |  a  |ab+zpy |  0  |  xy | -xy |   0   |id: L+R/1, -id: L|
 SCO | 0  | -  | 0  |  0  |  1   |  0  |   -   |  1  |  xy | -xy |   0   |id: L+R/1, -id: L|
 SLR | -  | -  | 1  |  0  |  0   |  1  |   -   |  -  |  -  |  -  |   -   |        -        |

TODO: specify AOP in a seperate table

TODO: specify wX, wY and wA

 S   |  wX  |  wY  |  wA  |
---------------------------
 S0  |

 SOP |
 SLO |zpy.Gg|zpy.gg|zpy.gG (why?)
 SIN |
 SHI |
 SCO |
 SLR | LD.Gg| LD.gg| LD.gG

#fsm next:

 Curr | 543210 | ID | AB | XY | ACI | 543210 | Next
----------------------------------------------------
 S0   | 000000 | -  | -  | -  |  -  | 000001 | SOP

 SOP  | 000001 | 0  | 1  | 0  |  -  | 100000 | SLR
 SOP  | 000001 | -  | -  | -  |  -  | 000010 | SLO
 SLO  | 000010 | 1  | 0  | 0  |  -  | 000100 | SIN
 SLO  | 000010 | 0  | 0  | 1  |  -  | 100000 | SLR
 SLO  | 000010 | -  | -  | -  |  -  | 001000 | SHI
 SIN  | 000100 | -  | -  | -  |  -  | 001000 | SHI
 SHI  | 001000 | -  | 1  | -  |  1  | 010000 | SCO
 SHI  | 001000 | 1  | 0  | 0  |  1  | 010000 | SCO
 SHI  | 001000 | -  | -  | -  |  -  | 100000 | SLR
 SCO  | 010000 | -  | -  | -  |  -  | 100000 | SLR
 SLR  | 100000 | -  | -  | -  |  -  | 000001 | SOP

SOP: bit 0 = -4.-3.-2.-1.-0 + 5
SLO: bit 1 = 0.-imm
SIN: bit 2 = 1.zpy
SHI: bit 3 = 1.-zp.-zpy + 2
SCO: bit 4 = 3.ci
SLR: bit 5 = 0.imm + 1.zp + 3.-ci + 4

#fsm next signal (TODO):

 - see instruction groups above
 - ACC, LD, ALU, W:

-----------------------------------------------------------------------------

a2 07       => LDX #07 (x=7)
a0 08       => LDY #08 (y=8)
b9 ff 00    => LDA $00ff,y (y=8)
b9 08 01    => LDA $0108,y (y=8)
bd f0 01    => LDA $01f0,x (x=7)
b5 30       => LDA $30,x (x=7)
b5 40       => LDA $40,x (x=7)
b5 ff       => LDA $ff,x (x=7), should access $0006
ad 10 01    => LDA $0110
a5 37       => LDA $37
a9 18       => LDA #18
b1 1e fc 02 => LDA ($1e),y (y=8, $1e=fc, $1f=02), should access $0304

 instr   id ab xy
7  6  5  4  3  2  1  0
----------------------
1  0  1  0  0! 0  1  0 => a2 IMM
1  0  1  0  0! 0  0  0 => a0 IMM
1  0  1  1  1  1  0  1 => bd ABS,x
1  0  1  1  1  0  0  1 => b9 ABS,y
1  0  1  1  1  1  0  1 => bd ABS,x
1  0  1  1  0  1  0  1 => b5 ZP,x
1  0  1  1  0  1  0  1 => b5 ZP,x
1  0  1  1  0  1  0  1 => b5 ZP,x
1  0  1  0  1  1  0  1 => ad ABS
1  0  1  0  0  1  0  1 => a5 ZP
1  0  1  0  1  0  0  1 => a9 IMM
1  0  1  1  0  0  0  1 => b1 (ZP),y

id ab xy  amode
------------------
0  0  0   (ZP,x)
0  1  0   IMM
1  0  0   (ZP),y
0  0  1   ZP
1  1  0   ABS,y
0  1  1   ABS
1  0  1   ZP,x
1  1  1   ABS,x
-----------------------------------------------------------------------------

TODOs:

* Load x/y with 7/8
* Update fsm to include zpy state
* Finish zpy implementation
* IMM and (ZP),y (2/3 days)
* Fix (ZP),y should take into account ACI
* Map 01, 10 instr groups to addr modes (1 day)
/ Opcode to signals (instr decoder, ? days):
- Implement (ZP,x) addr mode
- Implement store instructions
- Implement instr group 01 and 10

0x0 = 0000  0x8 = 1000
0x1 = 0001  0x9 = 1001
0x2 = 0010  0xA = 1010
0x3 = 0011  0xB = 1011
0x4 = 0100  0xC = 1100
0x5 = 0101  0xD = 1101
0x6 = 0110  0xE = 1110
0x7 = 0111  0xF = 1111

load/store are spread across groups with
      gg = {00: Y, 01: A, 10: X}
100aaagg = STY, STA, STX      : rR, wM
101aaagg = LDY, LDA, LDX      : rM, wR

load/store exceptions:
------------------------------------

10-01000 not a load/store
10-10000 not a load/store
10-11000 not a load/store

abs,x we have, but what about ldx abs,x?

for RR = 00, we only have 5 addr modes.
The remaining 3 combinations are used to
encode the following instructions:

10010000 = BCC
10110000 = BCS
100-1000 = DEY,TYA
101-1000 = CLV,TAY
------------------------------------

10-11110 not a load/store: no ABS,x

for RR = 10, we have 8 addr modes, but...

10000010 nothing
10100010 LDX IMM
10010110 STX ZP,!Y
10110110 LDX ZP,!Y


100-1010 = TXA,TXS
101-1010 = TAX,TSX
------------------------------------

group 01:
0xx---01 = ORA, AND, EOR, ADC : rM, rA, wA
11x---01 = CMP, SBC           : rM, rA, wA (SBC)

group 10:
0xx---10 = ASL, ROL, LSR, ROR : rM, wM / wA
11x---10 = DEC, INC           : rM, wM

group 00:
0xx---00 = ?, BIT, JMP, JMP()
11R---00 = CPY, CPX           : rM, rR (R = {0: Y, 1: X})

- Some instr read and write to mem, ASL for example (2/3 days)
- P: Overflow/Equality/Carry <-> detect & status register (2/3 days)
- Update FSM (AOP) for instr with addr modes (FSM too big?) (2/3 days)
- Estimated remaining time for instr with addr modes: 1-2 weeks
- Idea: perhaps use ROM and/or microprogramming for the FSM

- Flip ACI/ACO naming
* x -> xy in this doc
- specify wR logic & L+1
- ci = (zpy+ab).aci, zpy+ab is also in table
-----------------------------------------------------------------------------
